#+TITLE: Emacs config
#+AUTHOR: wangmingen
#+DATE: 2025/10/05 22:57:45

#+STARTUP: overview

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
;;; Commentary:
;;
;; early-init.el was introduced in Emacs 27.1. It is loaded before init.el,
;; before Emacs initializes its UI or package.el, and before site files are
;; loaded. This is great place for startup optimizing, because only here can you
;; *prevent* things from loading, rather than turn them off after-the-fact.
;;
;;; Code:

#+END_SRC

** Pre-init Settings
#+BEGIN_SRC emacs-lisp
;; Optimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; Disable package.el initialization at startup
(setq package-enable-at-startup nil
      package-quickstart nil)

;; Don't use precious startup time to check mtimes on elisp bytecode
(setq load-prefer-newer noninteractive)

;; Disable menu bar, tool bar, and vertical scroll bars
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Prevent automatic frame resizing
(setq frame-inhibit-implied-resize t)

;; Disable UI elements and startup screen/dialogs
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t
      use-file-dialog nil)

;; Disable deferred native compilation during early init
(setq comp-deferred-compilation nil)
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp

(provide 'early-init)
;;; early-init.el ends here
#+END_SRC


* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; init.el --- Main Emacs configuration entry -*- lexical-binding: t -*-
;;; Commentary:
;;
;;  This is the main entry point of my Emacs configuration.
;;  It loads modular configurations from the `lisp` directory.
;;
;;; Code:

#+END_SRC

** Core Config
#+BEGIN_SRC emacs-lisp
;; Load user modules from ./lisp
(let ((dir (locate-user-emacs-file "lisp")))
  (add-to-list 'load-path (file-name-as-directory dir)))

;; Set custom-file to avoid polluting init.el
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

;; Load modules quietly
(with-temp-message ""
  (require 'init-package)
  (require 'init-base)
  (require 'init-ui)
  (require 'init-edit)
  (require 'init-org)
  (require 'init-completion)
  )

;; Show startup time
(add-hook 'emacs-startup-hook
          (lambda () (message "Emacs ready in %s "
                              (emacs-init-time))))
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp

(provide 'init)
;;; init.el ends here
#+END_SRC


* init-package.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-package.el
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; init-package.el --- Package management configuration -*- lexical-binding: t -*-
;;; Commentary:
;;
;; This file configures Emacs' package management system and bootstraps
;; `use-package`, which is the foundation for modular configuration.
;;
;;; Code:

#+END_SRC

** Package.el
#+BEGIN_SRC emacs-lisp
(require 'package)

;; Define package archives
(setq package-archives
      '(("melpa"  . "https://melpa.org/packages/")
        ("gnu"    . "https://elpa.gnu.org/packages/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

;; Initialize package system (redundant on Emacs 27+, safe for older versions)
(package-initialize)

#+END_SRC

** Use-package
#+BEGIN_SRC emacs-lisp
;; Install `use-package` if missing
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Configure use-package behavior
(eval-and-compile
  (setq use-package-always-ensure nil        ; Explicit control of :ensure
        use-package-always-defer nil         ; Load packages immediately
        use-package-expand-minimally nil     ; Expand fully for readability
        use-package-enable-imenu-support t)  ; Add imenu index for navigation
  ;; In daemon mode, load packages eagerly
  (when (daemonp)
    (setq use-package-always-demand t)))

;; Load use-package at compile time
(eval-when-compile
  (require 'use-package))
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp

(provide 'init-package)
;;; init-package.el ends here
#+END_SRC


* init-base.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-base.el
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; init-base.el --- Basic environment configuration -*- lexical-binding: t; -*-
;;; Commentary:
;;
;; This module sets up the fundamental environment for Emacs.
;; It provides a consistent foundation for all subsequent modules.
;;
;;; Code:

#+END_SRC

** Base Config
#+BEGIN_SRC emacs-lisp
;; utf-8 everywhere
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

;; yank and paste
(setq mouse-yank-at-point t)
(setq select-enable-primary nil)
(setq select-enable-clipboard t)

;; warn when opening files larger than 100 MB
(setq large-file-warning-threshold 100000000)

;; manage clipboard
(setq kill-ring-max 200)
(setq kill-do-not-save-duplicates t)
(setq mark-ring-max 6)
(setq global-mark-ring-max 6)

;; increase recursion and evaluation depth limits
(setq max-lisp-eval-depth 10000)
(setq max-specpdl-size 10000)

;; use mouse in terminal emacs
(xterm-mouse-mode 1)
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp

(provide 'init-base)
;;; init-base.el ends here
#+END_SRC


* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; init-ui.el --- Visual interface and appearance settings -*- lexical-binding: t; -*-
;;; Commentary:
;;
;; This module handles all user interface and aesthetic settings,
;; including frame size, scrolling behavior, fonts, and themes.
;; It aims to provide a smooth, visually pleasant editing experience
;; similar to modern Emacs distributions.
;;
;;; Code:

#+END_SRC

** Basic
#+BEGIN_SRC emacs-lisp
;; set default frame size and position when running in GUI mode
(when (display-graphic-p)
  (let ((top    0)
        (left   (/ (x-display-pixel-width) 10))
        (height (round (* 0.8
                          (/ (x-display-pixel-height)
                             (frame-char-height))))))
    (let ((width  (round (* 2.5 height))))
      (setq default-frame-alist nil)
      (add-to-list 'default-frame-alist (cons 'top top))
      (add-to-list 'default-frame-alist (cons 'left left))
      (add-to-list 'default-frame-alist (cons 'height height))
      (add-to-list 'default-frame-alist (cons 'width width)))))

;; suppress GUI features
(setq use-file-dialog nil
      use-dialog-box nil
      inhibit-default-init t
      inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t
      initial-scratch-message (concat ";; happy coding, "
                                      (capitalize user-login-name)
                                      " - emacs ♥ you!\n\n"))

;; smooth scrolling
(setq scroll-step 2
      scroll-margin 2
      hscroll-step 2
      hscroll-margin 2
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01
      scroll-preserve-screen-position 'always
      auto-window-vscroll nil
      redisplay-skip-fontification-on-input t)

;; split rules
(setq split-width-threshold (assoc-default 'width default-frame-alist)
      split-height-threshold nil)

;; numbers
(column-number-mode t)
(use-package display-line-numbers
  :ensure nil
  :hook ((prog-mode
          conf-mode toml-ts-mode
          yaml-mode yaml-ts-mode)
         . display-line-numbers-mode)
  :init (setq display-line-numbers-width-start t))

;; misc
(blink-cursor-mode -1)
(setq bidi-paragraph-direction 'left-to-right
      fill-column 80
      display-raw-bytes-as-hex t
      ring-bell-function 'ignore)

#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
;; font configuration (via fontaine)
(use-package fontaine
  :ensure t
  :when (display-graphic-p)
  ;; :hook (kill-emacs . fontaine-store-latest-preset)
  :config
  (setq fontaine-latest-state-file
        (locate-user-emacs-file "etc/fontaine-latest-state.eld"))
  (setq fontaine-presets
        '((regular
           :default-height 140
           :default-weight regular
           :fixed-pitch-height 1.0
           :variable-pitch-height 1.0
           )
          (large
           :default-height 180
           :default-weight normal
           :fixed-pitch-height 1.0
           :variable-pitch-height 1.05
           )
          (t
           :default-family "JetBrainsMono Nerd Font Mono"
           :fixed-pitch-family "JetBrainsMono Nerd Font Mono"
           :variable-pitch-family "JetBrainsMono Nerd Font Mono"
           :italic-family "JetBrainsMono Nerd Font Mono"
           :variable-pitch-weight normal
           :bold-weight normal
           :italic-slant italic
           :line-spacing 0.1)
          ))
  ;; (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
  (fontaine-set-preset 'regular)

  ;; set emoji font
  (set-fontset-font
   t
   (if (version< emacs-version "28.1")
       '(#x1f300 . #x1fad0)
     'emoji)
   (cond
    ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
    ((member "Symbola" (font-family-list)) "Symbola")
    ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
    ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
    ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
    ))

  ;; set Chinese font
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font
     (frame-parameter nil 'font)
     charset
     (font-spec :family
                (cond
                 ((eq system-type 'darwin)
                  (cond
                   ((member "PingFang SC" (font-family-list)) "PingFang SC")
                   ((member "Sarasa Mono SC" (font-family-list)) "Sarasa Mono SC")
                   ))
                 ((eq system-type 'gnu/linux)
                  (cond
                   ((member "Sarasa Mono SC" (font-family-list)) "Sarasa Mono SC")
                   ))
                 (t
                  (cond
                   ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
                   ((member "Sarasa Mono SC" (font-family-list)) "Sarasa Mono SC")
                   )))
                )))

  ;; set Chinese font scale
  (setq face-font-rescale-alist `(
                                  ("Symbola"             . 1.3)
                                  ("Microsoft YaHei"     . 1.2)
                                  ("Sarasa Mono SC"      . 1.2)
                                  ("PingFang SC"         . 1.16)
                                  ("Apple Color Emoji"   . 0.91)
                                  ))
  )

#+END_SRC

#+CAPTION: 测试中英文字体对齐
#+NAME: 测试中英文字体对齐
| 中文 |   |
| abcd |   |

** Theme
#+BEGIN_SRC emacs-lisp
;; ef-themes
(use-package ef-themes
  :ensure t
  :bind ("C-c t" . ef-themes-toggle)
  :init
  ;; set two specific themes and switch between them
  (setq ef-themes-to-toggle '(ef-summer ef-winter))
  ;; set org headings and function syntax
  (setq ef-themes-headings
        '((0 . (bold 1))
          (1 . (bold 1))
          (2 . (rainbow bold 1))
          (3 . (rainbow bold 1))
          (4 . (rainbow bold 1))
          (t . (rainbow bold 1))))
  (setq ef-themes-region '(intense no-extend neutral))
  ;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes)

  ;; Load the theme of choice:
  ;; The themes we provide are recorded in the `ef-themes-dark-themes', `ef-themes-light-themes'.
  ;; (ef-themes-select 'ef-summer)
  (if (display-graphic-p)
      (ef-themes-load-random)
    (ef-themes-load-random 'dark))
  )

;; gruvbox
;; (use-package gruvbox-theme
;;   :ensure t
;;   :config
;;   (load-theme 'gruvbox-dark-medium t))

;; catpuccin 
;; (use-package catppuccin-theme
;;   :ensure t
;;   :config
;;   (load-theme 'catppuccin :no-confirm)
;;   (setq catppuccin-flavor 'mocha) ; 'latte, 'frappe, 'macchiato, or 'mocha
;;   (catppuccin-reload))

#+END_SRC

** Mode-line
#+BEGIN_SRC emacs-lisp
;; nice icons
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

;; hide minor modes to keep modeline clean
(use-package minions
  :ensure t
  :hook (after-init . minions-mode))

;; show current command/key in the mode line
(use-package keycast
  :ensure t
  :hook (after-init . keycast-mode)
  :config
  ;; set for doom-modeline support
  ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))
      ))

  (dolist (input '(self-insert-command
                   org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p
                   mouse-movement-p
                   mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))

  (setq keycast-log-format "%-20K%C\n")
  (setq keycast-log-frame-alist
        '((minibuffer . nil)))
  (setq keycast-log-newest-first t)
  )
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp  

(provide 'init-ui)
;;; init-ui.el ends here
#+END_SRC


* init-edit.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-edit.el :mkdirp yes
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; init-edit.el --- Editing settings -*- lexical-binding: t -*-
;;; Commentary:
;;
;; This file provides configurations related to text editing behavior.
;; It focuses on improving the editing experience by disabling unwanted
;; backups, refining keybindings, and enabling modal editing.
;;
;;; Code:

#+END_SRC

** Base Config
#+BEGIN_SRC emacs-lisp
;; disable automatic backup and autosave
(setq make-backup-files nil)
(setq auto-save-default nil)

;; indentation preferences
(setq indent-tabs-mode nil
      tab-width 4)

;; unbind unwanted or disruptive default shortcuts
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "s-q") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "M-m") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key [mouse-2] nil)

;; directly modify when selecting text
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))

#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
;; magit
(use-package magit
  :ensure t
  :defer t
  :commands (magit-status magit-blame)
  :init
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))

#+END_SRC
** Evil Mode
#+BEGIN_SRC emacs-lisp
;; provides a modal editing experience similar to Vim.
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp

(provide 'init-edit)
;;; init-edit.el ends here
#+END_SRC


* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; init-org.el --- Org mode settings -*- lexical-binding: t -*-
;;; Commentary:
;;
;; This file configures Org mode enhancements.
;;
;;; Code:

#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
;; basic org settings
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook ((org-mode . visual-line-mode)
         (org-mode . my/org-prettify-symbols))
  :commands (org-find-exact-headline-in-buffer org-set-tags)

  ;; faces: headline, code block, etc.
  :custom-face
  (org-document-title ((t (:height 1.6 :weight bold))))
  (org-level-1        ((t (:height 1.2 :weight bold))))
  (org-level-2        ((t (:height 1.15 :weight bold))))
  (org-level-3        ((t (:height 1.1 :weight bold))))
  (org-level-4        ((t (:height 1.05 :weight bold))))
  (org-block-begin-line ((t (:underline t :background unspecified))))
  (org-block-end-line   ((t (:overline t :background unspecified))))

  :custom
  ;; directories and files
  (org-directory "~/Workspace/org")
  (org-default-notes-file (expand-file-name "capture.org" org-directory))
  (org-modules '(ol-bibtex ol-info ol-eww org-habit org-protocol))

  ;; UI and behavior
  (org-edit-src-content-indentation 0)
  (org-fontify-whole-heading-line t)
  (org-fontify-todo-headline t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-hide-emphasis-markers t)
  (org-hide-macro-markers t)
  (org-highlight-latex-and-related '(native script entities))
  (org-pretty-entities t)
  ;; (org-ellipsis " ▾")
  (org-startup-with-inline-images t)
  (org-startup-folded 'overview)
  (org-indent-mode-turns-on-hiding-stars t)
  (org-adapt-indentation nil)
  (org-use-sub-superscripts '{})
  (org-image-actual-width nil)
  (org-return-follows-link nil)
  (org-startup-indented nil)
  (org-imenu-depth 4)
  (org-list-allow-alphabetical t)
  (org-list-demote-modify-bullet '(("-" . "+") ("+" . "1.") ("1." . "a.")))
  (org-fold-catch-invisible-edits 'smart)
  (org-insert-heading-respect-content nil)

  ;; headline spacing and behavior
  (org-blank-before-new-entry '((heading . t)
                                (plain-list-item . auto)))

  ;; latex preview
  (plist-put org-format-latex-options :scale 1.6)

  ;; TODO keywords and faces
  (org-todo-keywords
   '((sequence "TODO(t)" "WIP(i!)" "WAIT(w!)" "HOLD(h!)" "|"
               "DONE(d!)" "CANCELLED(c@/!)")
     (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))

  (org-todo-keyword-faces
   '(("TODO"       :foreground "#7c7c75" :weight bold)
     ("WIP"        :foreground "#0098dd" :weight bold)
     ("WAIT"       :foreground "#9f7efe" :weight bold)
     ("HOLD"       :foreground "#feb24c" :weight bold)
     ("DONE"       :foreground "#50a14f" :weight bold)
     ("CANCELLED"  :foreground "#ff6480" :weight bold)
     ("BUG"        :foreground "red"     :weight bold)
     ("FIXED"      :foreground "green"   :weight bold)))

  (org-todo-state-tags-triggers
   '(("CANCELLED" ("CANCELLED" . t))
     ("WAIT" ("WAIT" . t))
     ("HOLD" ("WAIT") ("HOLD" . t))
     (done ("WAIT") ("HOLD"))
     ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
     ("DONE" ("WAIT") ("CANCELLED") ("HOLD"))))

  ;; logging and notes
  (org-log-done 'time)
  (org-log-repeat 'time)
  (org-log-redeadline 'note)
  (org-log-reschedule 'note)
  (org-log-into-drawer t)
  (org-log-state-notes-insert-after-drawers nil)
  (org-closed-keep-when-no-todo t)

  ;; refile settings
  (org-refile-use-cache t)
  (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)

  ;; tags
  (org-auto-align-tags t)
  (org-use-tag-inheritance nil)
  (org-use-fast-tag-selection t)
  (org-fast-tag-selection-single-key t)
  (org-tag-persistent-alist
   '(("read" . ?r) ("mail" . ?m) ("emacs" . ?e)
     ("study" . ?s) ("work" . ?w)))
  (org-tag-alist
   '((:startgroup)
     ("crypt" . ?c) ("linux" . ?l) ("apple" . ?a)
     ("noexport" . ?n) ("ignore" . ?i) ("TOC" . ?t)
     (:endgroup)))

  ;; priorities and effort
  (org-priority-faces '((?A :foreground "red")
                        (?B :foreground "orange")
                        (?C :foreground "yellow")))
  (org-global-properties
   '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00")
     ("STYLE_ALL" . "habit")))
  (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %PRIORITY %TAGS %EFFORT{:}")

  ;; archive
  (org-archive-location "%s_archive::datetree/")

  ;; file opening behavior
  (org-file-apps
   '(("\\.png\\'"     . default)
     ("\\.gif\\'"     . my-func/open-and-play-gif-image)
     ;; ("\\.pdf\\'"     . emacs)
     ("\\.md\\'"      . emacs)
     ("\\.docx\\'"    . default)
     ("\\.pptx\\'"    . default)
     ("\\.xlsx\\'"    . default)
     ("\\.svg\\'"     . default)
     ("\\.html?\\'"   . default)
     ;; (auto-mode       . emacs)
     (directory       . emacs)))

  :config
  ;; prettify special keywords
  (defun my/org-prettify-symbols ()
    (setq prettify-symbols-alist
          (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
	          '(
                    ;; ("[ ]"              . 9744)         ; ☐
                    ;; ("[X]"              . 9745)         ; ☑
                    ;; ("[-]"              . 8863)         ; ⊟
                    ("#+begin_src"      . 9998)         ; ✎
                    ("#+end_src"        . 9635)         ; □
                    ("#+begin_example"  . 129083)       ; 🠻
                    ("#+end_example"    . 129081)       ; 🠹
                    ("#+results:"       . 9776)         ; ☰
                    ("#+attr_latex:"    . "🄛")
                    ("#+attr_html:"     . "🄗")
                    ("#+attr_org:"      . "🄞")
                    ("#+name:"          . "🄝")         ; 127261
                    ("#+caption:"       . "🄒")         ; 127250
                    ("#+date:"          . "📅")         ; 128197
                    ("#+author:"        . "💁")         ; 128100
                    ("#+setupfile:"     . 128221)       ; 📝
                    ("#+email:"         . 128231)       ; 📧
                    ("#+startup:"       . 10034)        ; ✲
                    ("#+options:"       . 9965)         ; ⛭
                    ("#+title:"         . 10162)        ; ➲
                    ("#+subtitle:"      . 11146)        ; ⮊
                    ("#+downloaded:"    . 8650)         ; ⇊
                    ("#+language:"      . 128441)       ; 🖹
                    ("#+begin_quote"    . 187)          ; »
                    ("#+end_quote"      . 171)          ; «
                    ("#+begin_results"  . 8943)         ; ⋯
                    ("#+end_results"    . 8943)         ; ⋯
		    )))
    (setq prettify-symbols-unprettify-at-point t)
    (prettify-symbols-mode 1))

  ;; play animated GIFs inside emacs
  (defun my-func/open-and-play-gif-image (file &optional link)
    "Display and animate GIF FILE inside Emacs buffer."
    (let ((gif (create-image file))
          (buf (get-buffer-create "*Org GIF Preview*")))
      (switch-to-buffer buf)
      (erase-buffer)
      (insert-image gif)
      (image-animate gif nil t)
      (local-set-key (kbd "q") #'bury-buffer)))

  )

;; extra features
(use-package org-contrib
  :ensure t)

#+END_SRC

** Org-Morden
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :ensure t
  :hook
  ;; Enable `org-modern' globally after startup
  (after-init . (lambda ()
                  (setq org-modern-hide-stars 'leading)
                  (global-org-modern-mode t)))
  :config
  ;; Fancy headline bullets
  (setq org-modern-star
        ["◉" "○" "✸" "✳" "◈" "◇" "✿" "❀" "✜"])

  ;; Add extra line spacing (0.1 = 10% of font height, 1 = 1px)
  (setq-default line-spacing 0.1)

  ;; Tag border width, or use `auto' for automatic sizing
  (setq org-modern-label-border 1)

  ;; Table line thickness
  (setq org-modern-table-vertical 2)   ;; Vertical lines (default: 3)
  (setq org-modern-table-horizontal 0) ;; Horizontal lines (default: 0.1)

  ;; Checkbox style
  (setq org-modern-checkbox
        '((?X . #("▢✓" 0 2 (composition ((2)))))
          (?- . #("▢–" 0 2 (composition ((2)))))
          (?\s . #("▢" 0 1 (composition ((1)))))))

  ;; List bullet symbols
  (setq org-modern-list
        '((?- . "•")
          (?+ . "◦")
          (?* . "▹")))

  ;; Show vertical line on the left of code blocks
  ;; (may look odd if `visual-fill-column-mode' is enabled)
  (setq org-modern-block-fringe t)

  ;; Disable prettification of block language names
  (setq org-modern-block-name nil)

  ;; Disable prettification of #+KEYWORDS
  (setq org-modern-keyword nil))

#+END_SRC
** Org-appear
#+BEGIN_SRC emacs-lisp
;; auto reveal
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t)
  )

#+END_SRC
** Auto Tangle
#+BEGIN_SRC emacs-lisp
;; automatically tangle code blocks upon saving Org files
(use-package org-auto-tangle
  :ensure t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp

(provide 'init-org)
;;; init-org.el ends here
#+END_SRC


* init-completion.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-completion.el :mkdirp yes
:END:

** File Header
#+BEGIN_SRC emacs-lisp
;;; init-completion.el --- Completion settings -*- lexical-binding: t -*-
;;; Commentary:
;;
;; This file configures code completion and snippet systems.
;;
;;; Code:

#+END_SRC

** Vertico
#+BEGIN_SRC emacs-lisp
;; Vertical interactive completion UI
(use-package vertico
  :ensure t
  :hook (after-init . vertico-mode)
  :bind (:map minibuffer-local-map
              ("M-<DEL>" . my/minibuffer-backward-kill)
              :map vertico-map
              ("M-q" . vertico-quick-insert)) ; use C-g to exit
  :config
  (defun my/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-kill-word arg)))

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  
  (setq vertico-cycle t)                ; cycle from last to first
  :custom
  (vertico-count 15)                    ; number of candidates to display, default is 10
  )

#+END_SRC

** Orderless
#+BEGIN_SRC emacs-lisp
;; support Pinyin first character match for orderless, avy etc.
(use-package pinyinlib
  :ensure t)

;; orderless completion style
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless partial-completion basic))
  (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil)
  :config
  ;; make completion support pinyin, refer to
  ;; https://emacs-china.org/t/vertico/17913/2
  (defun completion--regex-pinyin (str)
    (orderless-regexp (pinyinlib-build-regexp-string str)))
  (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
  )

#+END_SRC

** Marginalia
#+BEGIN_SRC emacs-lisp
;; minibuffer helpful annotations
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode)
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  )

#+END_SRC

** Consult
#+BEGIN_QUOTE
For locate on MacOS:

1. =locate= is not enabled in MacOS by default. We need to enable it via:
   sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist

2. Then we need to wait =locate= to build db for the whole file system.

3. If there is something wrong with updating locate db, we can update it manually via:
   chomd 755 ~/Library ~/Downloads ~/Documents ~/Desktop
   sudo /usr/libexec/locate.updatedb
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
;; enhanced search and navigation interface
(use-package consult
  :ensure t
  :after org
  :bind (([remap goto-line]                     . consult-goto-line)
         ([remap isearch-forward]               . consult-line-symbol-at-point) ; my-consult-ripgrep-or-line
         ([remap switch-to-buffer]              . consult-buffer)
         ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
         ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
         ([remap yank-pop]                      . consult-yank-pop)
         ([remap apropos]                       . consult-apropos)
         ([remap bookmark-jump]                 . consult-bookmark)
         ([remap goto-line]                     . consult-goto-line)
         ([remap imenu]                         . consult-imenu)
         ([remap multi-occur]                   . consult-multi-occur)
         ([remap recentf-open-files]            . consult-recent-file)
         ("C-x j"                               . consult-mark)
         ("C-c g"                               . consult-ripgrep)
         ("C-c f"                               . consult-find)
         ("\e\ef"                               . consult-locate) ; need to enable locate first
         ("C-c n h"                             . my/consult-find-org-headings)
         :map org-mode-map
         ("C-c C-j"                             . consult-org-heading)
         :map minibuffer-local-map
         ("C-r"                                 . consult-history)
         :map isearch-mode-map
         ("C-;"                                 . consult-line)
         :map prog-mode-map
         ("C-c C-j"                             . consult-outline)
         )
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; MacOS locate doesn't support `--ignore-case --existing' args.
  (setq consult-locate-args (pcase system-type
                              ('gnu/linux "locate --ignore-case --existing --regex")
                              ('darwin "mdfind -name")))
  :config
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)

  ;; Use `consult-ripgrep' instead of `consult-line' in large buffers
  (defun consult-line-symbol-at-point ()
    "Consult line the synbol where the point is"
    (interactive)
    (consult-line (thing-at-point 'symbol)))
  )

#+END_SRC

** Corfu
#+BEGIN_SRC emacs-lisp
;; completion overlay UI for in-buffer completion
(use-package corfu
  :ensure t
  :hook (after-init . global-corfu-mode)
  :bind
  (:map corfu-map
        ("SPC" . corfu-insert-separator)    ; configure space for separator insertion
        ("M-q" . corfu-quick-complete)      ; use C-g to exit
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :config
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 0)
  (setq tab-always-indent 'complete)

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  ;; enable corfu in eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode)))

  ;; For Eshell
  ;; ===========
  ;; avoid press RET twice in Eshell
  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (advice-add #'corfu-insert :after #'corfu-send-shell)

  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  )

#+END_SRC

** Cape
#+BEGIN_SRC emacs-lisp
;; completion at point extensions
(use-package cape
  :ensure t
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)  ; programming language keyword
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)   ; elisp symbol
  (add-to-list 'completion-at-point-functions #'cape-line)
  
  :config
  (setq cape-dict-file (expand-file-name "etc/hunspell_dict.txt" user-emacs-directory))
  
  ;; for Eshell:
  ;; ===========
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
  )

#+END_SRC

** Which-key
#+BEGIN_SRC emacs-lisp
;; which-key settings
(use-package which-key
  :ensure nil
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.4
        which-key-separator " → "
        which-key-prefix-prefix "+ "
        which-key-side-window-location 'bottom))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
;; provides reusable templates for faster editing and coding
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :init (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  :hook (after-init . yas-global-mode)
  :commands (yas-global-mode yas-minor-mode)
  :config
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

  (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))

  (defun smarter-yas-expand-next-field ()
    "Try to `yas-expand' then `yas-next-field' at current cursor position."
    (interactive)
    (let ((old-point (point))
          (old-tick (buffer-chars-modified-tick)))
      (yas-expand)
      (when (and (eq old-point (point))
                 (eq old-tick (buffer-chars-modified-tick)))
        (ignore-errors (yas-next-field)))))
  )
#+END_SRC

** File Footer
#+BEGIN_SRC emacs-lisp

(provide 'init-completion)
;;; init-completion.el ends here
#+END_SRC
